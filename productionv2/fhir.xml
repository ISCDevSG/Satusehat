<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2023.1 (Build 229U)" ts="2023-05-26 12:57:52">
<Class name="fhir.bp.HL7ToSDA.Context">
<Description>
This class is generated by the fhir.bp.HL7ToSDA BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.HL7ToSDA</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>66610,30941.9390121</TimeChanged>
<TimeCreated>66576,75575.2470812</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>SDA3Container</Value>
</Value>
<Value name="2">
<Value>PatientMRN</Value>
</Value>
<Value name="3">
<Value>SDAContext</Value>
</Value>
<Value name="4">
<Value>sdaStreamGC</Value>
</Value>
</Data>
</Storage>

<Property name="PatientMRN">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SDA3Container">
<Type>HS.SDA3.Container</Type>
</Property>

<Property name="SDAContext">
<Type>Ens.StreamContainer</Type>
</Property>

<Property name="sdaStreamGC">
<Type>%Stream.GlobalCharacter</Type>
</Property>
</Class>


<Class name="fhir.bp.HL7ToSDA.Thread1">
<Description>
This class is generated by the fhir.bp.HL7ToSDA BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.HL7ToSDA</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>66610,30942.1420752</TimeChanged>
<TimeCreated>66610,30941.929257</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.SDA3Container
 Set status=$classmethod("fhir.dtl.HL7ORUR01toSDA","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.SDA3Container=iscTemp
 Do {
 set status=context.SDA3Container.ToQuickXMLStream(context.sdaStreamGC)
 
 set context.SDAContext=context.sdaStreamGC
 
 set context.PatientMRN = request.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:PatientIDInternalID(1).ID")
 
 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call SDA to FHIR bp ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.Message.XMLMessage).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.ContentStream=context.SDAContext
 If $$$ISERR(status) Quit
 Set status=callrequest.AdditionalInfo.SetAt(context.PatientMRN,"PatientResourceId")
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","HS.FHIR.DTL.Util.HC.SDA3.FHIR.Process",callrequest,"Call SDA to FHIR bp",1,0,"Call SDA to FHIR bp",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call SDA to FHIR bp ---
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.HL7ToSDA">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>66577,77991.5614661</TimeChanged>
<TimeCreated>66576,61440.315831</TimeCreated>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='EnsLib.HL7.Message' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='SDA3Container' type='HS.SDA3.Container' instantiate='0' />
<property name='sdaStreamGC' type='%Stream.GlobalCharacter' instantiate='0' />
<property name='SDAContext' type='Ens.StreamContainer' instantiate='0' />
<property name='PatientMRN' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
</context>
<sequence xend='200' yend='550' >
<transform name='HL7 to SDA' class='fhir.dtl.HL7ORUR01toSDA' source='request' target='context.SDA3Container' xpos='200' ypos='250' />
<code name='Package SDA Stream' xpos='200' ypos='350' >
<![CDATA[ set status=context.SDA3Container.ToQuickXMLStream(context.sdaStreamGC)
 
 set context.SDAContext=context.sdaStreamGC
 
 set context.PatientMRN = request.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:PatientIDInternalID(1).ID")
 ]]]]><![CDATA[>
</code>
<call name='Call SDA to FHIR bp' target='HS.FHIR.DTL.Util.HC.SDA3.FHIR.Process' async='1' xpos='200' ypos='450' >
<request type='HS.Message.XMLMessage' >
<assign property="callrequest.ContentStream" value="context.SDAContext" action="set" />
<assign property="callrequest.AdditionalInfo" value="context.PatientMRN" action="set" key="&quot;PatientResourceId&quot;" />
</request>
<response type='Ens.Response' />
</call>
</sequence>
</process>
]]></Data>
</XData>
</Class>


<Class name="fhir.bp.csvToFhirEncounter.Context">
<Description>
This class is generated by the fhir.bp.csvToFhirEncounter BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirEncounter</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>66620,44485.3636198</TimeChanged>
<TimeCreated>66618,74997.3942994</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="StreamId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="fhirEncounter">
<Type>HS.FHIR.DTL.vR4.Model.Resource.Encounter</Type>
</Property>

<Property name="fhirrespones">
<Type>HS.FHIRServer.Interop.Response</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.EncounterRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirEncounter.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.EncounterRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirEncounter.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse3">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.EncounterRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirEncounter.Thread1","OnResponse3")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>StreamId</Value>
</Value>
<Value name="2">
<Value>fhirEncounter</Value>
</Value>
<Value name="3">
<Value>fhirrespones</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirEncounter.Thread1">
<Description>
This class is generated by the fhir.bp.csvToFhirEncounter BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirEncounter</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>66620,44485.646571</TimeChanged>
<TimeCreated>66620,44485.343354</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.Method="GET") {
 Set ..%NextState="S3"
 } elseif (request.Method="POST") {
 Set ..%NextState="S4"
 } elseif (request.Method="PUT") {
 Set ..%NextState="S7"
 } else {
 Set ..%NextState="S2"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Call BO GET ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Encounter/"_request.id
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="GET"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","ToSatusehat",callrequest,"Call BO GET",1,0,"Call BO GET",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO GET ---
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirEncounter
 Set status=$classmethod("fhir.dtl.csvToFhirR4Encounter","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirEncounter=iscTemp
 Do {
 set outp = context.fhirEncounter.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO POST ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Encounter"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="POST"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","ToSatusehat",callrequest,"Call BO POST",1,0,"Call BO POST",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO POST ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO POST") Do ..%PendingResponses.SetAt("","Call BO POST")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO POST",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S6"
 } else {
    Set ..%NextState="S5",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S6"
 } else {
    Set ..%NextState="S5",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirEncounter
 Set status=$classmethod("fhir.dtl.csvToFhirR4Encounter","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirEncounter=iscTemp
 Do {
 set outp = context.fhirEncounter.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO PUT ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Encounter/"_request.id
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="PUT"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","ToSatusehat",callrequest,"Call BO PUT",1,0,"Call BO PUT",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO PUT ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO PUT") Do ..%PendingResponses.SetAt("","Call BO PUT")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO PUT",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirEncounter">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>66620,44484.1166688</TimeChanged>
<TimeCreated>66618,58527.9960912</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='User.EncounterRM.Record' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='fhirEncounter' type='HS.FHIR.DTL.vR4.Model.Resource.Encounter' instantiate='0' />
<property name='StreamId' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='fhirrespones' type='HS.FHIRServer.Interop.Response' instantiate='0' />
</context>
<sequence xend='200' yend='900' >
<switch name='Condition' xpos='200' ypos='250' xend='200' yend='800' >
<case condition='request.Method="GET"' name='GET' >
<call name='Call BO GET' target='ToSatusehat' async='1' xpos='335' ypos='400' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.Request.RequestPath" value="&quot;Encounter/&quot;_request.id" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;GET&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
</case>
<case condition='request.Method="POST"' name='POST' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Encounter' source='request' target='context.fhirEncounter' xpos='605' ypos='400' />
<code name='covert to stream' xpos='605' ypos='500' >
<![CDATA[ set outp = context.fhirEncounter.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO POST' target='ToSatusehat' async='0' timeout='60' xpos='605' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Encounter&quot;" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;POST&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
</case>
<case condition='request.Method="PUT"' name='PUT' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Encounter' source='request' target='context.fhirEncounter' xpos='875' ypos='400' />
<code name='covert to stream' xpos='875' ypos='500' >
<![CDATA[ set outp = context.fhirEncounter.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO PUT' target='ToSatusehat' async='0' timeout='60' xpos='875' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Encounter/&quot;_request.id" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;PUT&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
</case>
<default/>
</switch>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirLocation.Context">
<Description>
This class is generated by the fhir.bp.csvToFhirLocation BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirLocation</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>66620,44414.1710434</TimeChanged>
<TimeCreated>66616,60166.0577746</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="StreamId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="fhirLocation">
<Type>HS.FHIR.DTL.vR4.Model.Resource.Location</Type>
</Property>

<Property name="fhirrespones">
<Type>HS.FHIRServer.Interop.Response</Type>
</Property>

<Property name="pathStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="queryStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.LocationRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirLocation.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.LocationRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirLocation.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse3">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.LocationRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirLocation.Thread1","OnResponse3")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>StreamId</Value>
</Value>
<Value name="2">
<Value>fhirOrganization</Value>
</Value>
<Value name="3">
<Value>fhirrespones</Value>
</Value>
<Value name="4">
<Value>fhirLocation</Value>
</Value>
<Value name="5">
<Value>pathStr</Value>
</Value>
<Value name="6">
<Value>queryStr</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirLocation.Thread1">
<Description>
This class is generated by the fhir.bp.csvToFhirLocation BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirLocation</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>66620,44414.524958</TimeChanged>
<TimeCreated>66620,44414.1534439</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.Method="GET") {
 Set ..%NextState="S3"
 } elseif (request.Method="POST") {
 Set ..%NextState="S6"
 } elseif (request.Method="PUT") {
 Set ..%NextState="S9"
 } else {
 Set ..%NextState="S2"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetLocationResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Location")
 set context.queryStr=##class(fhir.db.resource.Location).AddQueryString(request.id,request.identifierSystem,request.identifierValue,request.name,request.managingOrganization)
 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO GET ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath=context.pathStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.QueryString")
 Set status=$$$OK,callrequest.Request.QueryString=context.queryStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="GET"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","ToSatusehat",callrequest,"Call BO GET",1,0,"Call BO GET",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO GET ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO GET") Do ..%PendingResponses.SetAt("","Call BO GET")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetLocationResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirLocation
 Set status=$classmethod("fhir.dtl.csvToFhirR4Location","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirLocation=iscTemp
 Do {
 set outp = context.fhirLocation.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO POST ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Location"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="POST"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","ToSatusehat",callrequest,"Call BO POST",1,0,"Call BO POST",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO POST ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO POST") Do ..%PendingResponses.SetAt("","Call BO POST")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO POST",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetLocationResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirLocation
 Set status=$classmethod("fhir.dtl.csvToFhirR4Location","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirLocation=iscTemp
 Do {
 set outp = context.fhirLocation.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO PUT ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Location/"_request.id
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="PUT"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","ToSatusehat",callrequest,"Call BO PUT",1,0,"Call BO PUT",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO PUT ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO PUT") Do ..%PendingResponses.SetAt("","Call BO PUT")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO PUT",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirLocation">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>66620,44412.6679027</TimeChanged>
<TimeCreated>66616,60137.6799387</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='User.LocationRM.Record' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='fhirLocation' type='HS.FHIR.DTL.vR4.Model.Resource.Location' instantiate='0' />
<property name='StreamId' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='fhirrespones' type='HS.FHIRServer.Interop.Response' instantiate='0' />
<property name='queryStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='200' />
</parameters>
</property>
<property name='pathStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='200' />
</parameters>
</property>
</context>
<sequence xend='200' yend='800' >
<switch name='Condition' xpos='200' ypos='250' xend='200' yend='700' >
<case condition='request.Method="GET"' name='GET' >
<code name='Add Path/Query String' xpos='335' ypos='400' >
<![CDATA[ set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Location")
 set context.queryStr=##class(fhir.db.resource.Location).AddQueryString(request.id,request.identifierSystem,request.identifierValue,request.name,request.managingOrganization)]]]]><![CDATA[>
</code>
<call name='Call BO GET' target='ToSatusehat' async='0' xpos='335' ypos='500' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.Request.RequestPath" value="context.pathStr" action="set" />
<assign property="callrequest.Request.QueryString" value="context.queryStr" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;GET&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='335' ypos='600' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetLocationResult(str)]]]]><![CDATA[>
</code>
</case>
<case condition='request.Method="POST"' name='POST' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Location' source='request' target='context.fhirLocation' xpos='605' ypos='400' />
<code name='covert to stream' xpos='605' ypos='500' >
<![CDATA[ set outp = context.fhirLocation.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO POST' target='ToSatusehat' async='0' timeout='60' xpos='605' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Location&quot;" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;POST&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='585' ypos='641' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetLocationResult(str)]]]]><![CDATA[>
</code>
</case>
<case condition='request.Method="PUT"' name='PUT' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Location' source='request' target='context.fhirLocation' xpos='875' ypos='400' />
<code name='covert to stream' xpos='875' ypos='500' >
<![CDATA[ set outp = context.fhirLocation.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO PUT' target='ToSatusehat' async='0' timeout='60' xpos='875' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Location/&quot;_request.id" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;PUT&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='775' ypos='655' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetLocationResult(str)]]]]><![CDATA[>
</code>
</case>
<default/>
</switch>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirOrganization.Context">
<Description>
This class is generated by the fhir.bp.csvToFhirOrganization BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirOrganization</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>66620,36551.8047386</TimeChanged>
<TimeCreated>66611,52873.7265562</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="StreamId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="fhirOrganization">
<Type>HS.FHIR.DTL.vR4.Model.Resource.Organization</Type>
</Property>

<Property name="fhirrespones">
<Type>HS.FHIRServer.Interop.Response</Type>
</Property>

<Property name="pathStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="queryStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.OrganizationRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirOrganization.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.OrganizationRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirOrganization.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse3">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.OrganizationRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirOrganization.Thread1","OnResponse3")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>fhirOrganization</Value>
</Value>
<Value name="2">
<Value>StreamId</Value>
</Value>
<Value name="3">
<Value>fhirrespones</Value>
</Value>
<Value name="4">
<Value>pathStr</Value>
</Value>
<Value name="5">
<Value>queryStr</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirOrganization.Thread1">
<Description>
This class is generated by the fhir.bp.csvToFhirOrganization BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirOrganization</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>66620,36552.109524</TimeChanged>
<TimeCreated>66620,36551.791559</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.Method="GET") {
 Set ..%NextState="S3"
 } elseif (request.Method="POST") {
 Set ..%NextState="S6"
 } elseif (request.Method="PUT") {
 Set ..%NextState="S9"
 } else {
 Set ..%NextState="S2"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetOrganizationResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Organization")
 set context.queryStr=##class(fhir.db.resource.Organization).AddQueryString(request.id,request.name,request.partOfReference)
 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO GET ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath=context.pathStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.QueryString")
 Set status=$$$OK,callrequest.Request.QueryString=context.queryStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="GET"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","ToSatusehat",callrequest,"Call BO GET",1,0,"Call BO GET",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO GET ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO GET") Do ..%PendingResponses.SetAt("","Call BO GET")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetOrganizationResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirOrganization
 Set status=$classmethod("fhir.dtl.csvToFhirR4Organization","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirOrganization=iscTemp
 Do {
 set outp = context.fhirOrganization.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO POST ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Organization"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="POST"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","ToSatusehat",callrequest,"Call BO POST",1,0,"Call BO POST",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO POST ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO POST") Do ..%PendingResponses.SetAt("","Call BO POST")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO POST",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetOrganizationResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirOrganization
 Set status=$classmethod("fhir.dtl.csvToFhirR4Organization","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirOrganization=iscTemp
 Do {
 set outp = context.fhirOrganization.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO PUT ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Organization/"_request.id
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="PUT"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","ToSatusehat",callrequest,"Call BO PUT",1,0,"Call BO PUT",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO PUT ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO PUT") Do ..%PendingResponses.SetAt("","Call BO PUT")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO PUT",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirOrganization">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>66620,36550.3159209</TimeChanged>
<TimeCreated>66611,52700.9317422</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='User.OrganizationRM.Record' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='fhirOrganization' type='HS.FHIR.DTL.vR4.Model.Resource.Organization' instantiate='0' />
<property name='StreamId' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='fhirrespones' type='HS.FHIRServer.Interop.Response' instantiate='0' />
<property name='pathStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='100' />
</parameters>
</property>
<property name='queryStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='100' />
</parameters>
</property>
</context>
<sequence xend='200' yend='1000' >
<switch name='Condition' xpos='200' ypos='250' xend='200' yend='900' >
<case condition='request.Method="GET"' name='GET' >
<code name='Add Path/Query String' xpos='335' ypos='400' >
<![CDATA[ set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Organization")
 set context.queryStr=##class(fhir.db.resource.Organization).AddQueryString(request.id,request.name,request.partOfReference)]]]]><![CDATA[>
</code>
<call name='Call BO GET' target='ToSatusehat' async='0' xpos='335' ypos='500' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.Request.RequestPath" value="context.pathStr" action="set" />
<assign property="callrequest.Request.QueryString" value="context.queryStr" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;GET&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='335' ypos='600' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetOrganizationResult(str)]]]]><![CDATA[>
</code>
</case>
<case condition='request.Method="POST"' name='POST' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Organization' source='request' target='context.fhirOrganization' xpos='605' ypos='400' />
<code name='covert to stream' xpos='605' ypos='500' >
<![CDATA[ set outp = context.fhirOrganization.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO POST' target='ToSatusehat' async='0' timeout='60' xpos='605' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Organization&quot;" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;POST&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='605' ypos='700' disabled="true">
<![CDATA[ set tid=""
 &sql(select ID into :tid FROM fhir_db_resource.Organization)
 
 if (tid=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Organization).%New()
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }
 
 if (tid'=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Organization).%OpenId(tid)
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }]]]]><![CDATA[>
</code>
<code name='write to db' xpos='605' ypos='800' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetOrganizationResult(str)]]]]><![CDATA[>
</code>
</case>
<case condition='request.Method="PUT"' name='PUT' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Organization' source='request' target='context.fhirOrganization' xpos='875' ypos='400' />
<code name='covert to stream' xpos='875' ypos='500' >
<![CDATA[ set outp = context.fhirOrganization.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO PUT' target='ToSatusehat' async='0' timeout='60' xpos='875' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Organization/&quot;_request.id" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;PUT&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='875' ypos='700' disabled="true">
<![CDATA[ set tid=""
 &sql(select ID into :tid FROM fhir_db_resource.Organization)
 
 if (tid=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Organization).%New()
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }
 
 if (tid'=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Organization).%OpenId(tid)
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }]]]]><![CDATA[>
</code>
<code name='write to db' xpos='875' ypos='800' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetOrganizationResult(str)]]]]><![CDATA[>
</code>
</case>
<default/>
</switch>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirPatient.Context">
<Description>
This class is generated by the fhir.bp.csvToFhirPatient BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirPatient</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>66619,83062.4319061</TimeChanged>
<TimeCreated>66617,55324.2328429</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="StreamId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="fhirPatient">
<Type>HS.FHIR.DTL.vR4.Model.Resource.Patient</Type>
</Property>

<Property name="fhirrespones">
<Type>HS.FHIRServer.Interop.Response</Type>
</Property>

<Property name="pathStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="queryStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.PatientRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirPatient.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.PatientRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirPatient.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse3">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.PatientRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirPatient.Thread1","OnResponse3")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>StreamId</Value>
</Value>
<Value name="2">
<Value>fhirPatient</Value>
</Value>
<Value name="3">
<Value>fhirrespones</Value>
</Value>
<Value name="4">
<Value>queryStr</Value>
</Value>
<Value name="5">
<Value>pathStr</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirPatient.Thread1">
<Description>
This class is generated by the fhir.bp.csvToFhirPatient BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirPatient</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>66619,83062.7740064</TimeChanged>
<TimeCreated>66619,83062.415358</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.Method="GET") {
 Set ..%NextState="S3"
 } elseif (request.Method="POST") {
 Set ..%NextState="S6"
 } elseif (request.Method="PUT") {
 Set ..%NextState="S9"
 } else {
 Set ..%NextState="S2"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Patient")
 set context.queryStr=##class(production.utli.utli).AddQueryString(request.id,request.identifierSystemNik,request.identifierValueNik,request.nameText,"",request.birthDate)
 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO GET ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath=context.pathStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.QueryString")
 Set status=$$$OK,callrequest.Request.QueryString=context.queryStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="GET"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","ToSatusehat",callrequest,"Call BO GET",1,0,"Call BO GET",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO GET ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO GET") Do ..%PendingResponses.SetAt("","Call BO GET")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetPatientResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirPatient
 Set status=$classmethod("fhir.dtl.csvToFhirR4Patient","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirPatient=iscTemp
 Do {
 set outp = context.fhirPatient.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO POST ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Patient"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="POST"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","ToSatusehat",callrequest,"Call BO POST",1,0,"Call BO POST",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO POST ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO POST") Do ..%PendingResponses.SetAt("","Call BO POST")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO POST",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S8"
 } else {
    Set ..%NextState="S7",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.fhirPatient
 Set status=$classmethod("fhir.dtl.csvToFhirR4Patient","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.fhirPatient=iscTemp
 Do {
 set outp = context.fhirPatient.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()

 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO PUT ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.QuickStreamId=context.StreamId
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath="Patient/"_request.id
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="PUT"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","ToSatusehat",callrequest,"Call BO PUT",1,0,"Call BO PUT",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO PUT ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO PUT") Do ..%PendingResponses.SetAt("","Call BO PUT")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,60,"Call BO PUT",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirPatient">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>66619,83061.0392856</TimeChanged>
<TimeCreated>66616,66173.4510234</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='User.PatientRM.Record' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='fhirPatient' type='HS.FHIR.DTL.vR4.Model.Resource.Patient' instantiate='0' />
<property name='StreamId' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='fhirrespones' type='HS.FHIRServer.Interop.Response' instantiate='0' />
<property name='queryStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='200' />
</parameters>
</property>
<property name='pathStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='100' />
</parameters>
</property>
</context>
<sequence xend='200' yend='900' >
<switch name='Condition' xpos='200' ypos='250' xend='200' yend='800' >
<case condition='request.Method="GET"' name='GET' >
<code name='Add Path/Query String' xpos='335' ypos='400' >
<![CDATA[ set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Patient")
 set context.queryStr=##class(production.utli.utli).AddQueryString(request.id,request.identifierSystemNik,request.identifierValueNik,request.nameText,"",request.birthDate)]]]]><![CDATA[>
</code>
<call name='Call BO GET' target='ToSatusehat' async='0' xpos='335' ypos='500' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.Request.RequestPath" value="context.pathStr" action="set" />
<assign property="callrequest.Request.QueryString" value="context.queryStr" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;GET&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='335' ypos='600' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetPatientResult(str)]]]]><![CDATA[>
</code>
</case>
<case condition='request.Method="POST"' name='POST' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Patient' source='request' target='context.fhirPatient' xpos='605' ypos='400' />
<code name='covert to stream' xpos='605' ypos='500' >
<![CDATA[ set outp = context.fhirPatient.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO POST' target='ToSatusehat' async='0' timeout='60' xpos='605' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Patient&quot;" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;POST&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='605' ypos='700' disabled="true">
<![CDATA[ set tid=""
 &sql(select ID into :tid FROM fhir_db_resource.Patient)
 
 if (tid=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Patient).%New()
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }
 
 if (tid'=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Patient).%OpenId(tid)
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }]]]]><![CDATA[>
</code>
</case>
<case condition='request.Method="PUT"' name='PUT' >
<transform name='csv to fhir' class='fhir.dtl.csvToFhirR4Patient' source='request' target='context.fhirPatient' xpos='875' ypos='400' />
<code name='covert to stream' xpos='875' ypos='500' >
<![CDATA[ set outp = context.fhirPatient.ToJSON()
 Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
 set tSC=tQuickStream.Write(outp.Read())
 set context.StreamId =tQuickStream.%Id()
]]]]><![CDATA[>
</code>
<call name='Call BO PUT' target='ToSatusehat' async='0' timeout='60' xpos='875' ypos='600' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.QuickStreamId" value="context.StreamId" action="set" />
<assign property="callrequest.Request.RequestPath" value="&quot;Patient/&quot;_request.id" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;PUT&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
</response>
</call>
<code name='write to db' xpos='875' ypos='700' disabled="true">
<![CDATA[ set tid=""
 &sql(select ID into :tid FROM fhir_db_resource.Patient)
 
 if (tid=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Patient).%New()
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }
 
 if (tid'=""){
   Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(context.StreamId)
 
   set tobj=##class(fhir.db.resource.Patient).%OpenId(tid)
   set tobj.RId=context.fhirrespones.Response.Id
   set status=tobj.Resource.Write(tQuickStream.Read())
   set tsc=tobj.%Save()
 }]]]]><![CDATA[>
</code>
</case>
<default/>
</switch>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirPractitioner.Context">
<Description>
This class is generated by the fhir.bp.csvToFhirPractitioner BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirPractitioner</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>66620,46659.2917594</TimeChanged>
<TimeCreated>66619,65494.4784483</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="StreamId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="fhirrespones">
<Type>HS.FHIRServer.Interop.Response</Type>
</Property>

<Property name="pathStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="queryStr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="responseStrId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to ToSatusehat</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.PractitionerGETRM.Record,response:Ens.Response,callrequest:HS.FHIRServer.Interop.Request,callresponse:HS.FHIRServer.Interop.Response,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.fhirrespones=callresponse
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.responseStrId=callresponse.QuickStreamId
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("fhir.bp.csvToFhirPractitioner.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>StreamId</Value>
</Value>
<Value name="2">
<Value>fhirPatient</Value>
</Value>
<Value name="3">
<Value>fhirrespones</Value>
</Value>
<Value name="4">
<Value>pathStr</Value>
</Value>
<Value name="5">
<Value>queryStr</Value>
</Value>
<Value name="6">
<Value>responseStrId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirPractitioner.Thread1">
<Description>
This class is generated by the fhir.bp.csvToFhirPractitioner BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>fhir.bp.csvToFhirPractitioner</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>66620,46659.3735545</TimeChanged>
<TimeCreated>66620,46657.7930669</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.Method="GET") {
 Set ..%NextState="S3"
 } else {
 Set ..%NextState="S2"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Practitioner")
 set context.queryStr=##class(production.utli.utli).AddQueryString(request.id,request.identifierSystemNIK,request.identifierValueNIK,request.name,request.gender,request.birthdate)
 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call Call BO GET ---
 #; --- Begin Request ---
 Set callrequest=##class(HS.FHIRServer.Interop.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestPath")
 Set status=$$$OK,callrequest.Request.RequestPath=context.pathStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.QueryString")
 Set status=$$$OK,callrequest.Request.QueryString=context.queryStr
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestMethod")
 Set status=$$$OK,callrequest.Request.RequestMethod="GET"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.RequestFormatCode")
 Set status=$$$OK,callrequest.Request.RequestFormatCode="JSON"
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.Request.ResponseFormatCode")
 Set status=$$$OK,callrequest.Request.ResponseFormatCode="JSON"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","ToSatusehat",callrequest,"Call BO GET",1,0,"Call BO GET",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Call BO GET ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Call BO GET") Do ..%PendingResponses.SetAt("","Call BO GET")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetPractitionerResult(str)
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.bp.csvToFhirPractitioner">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>66620,46656.0041468</TimeChanged>
<TimeCreated>66619,63374.9147393</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='User.PractitionerGETRM.Record' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='StreamId' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='fhirrespones' type='HS.FHIRServer.Interop.Response' instantiate='0' />
<property name='queryStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='200' />
</parameters>
</property>
<property name='pathStr' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='100' />
</parameters>
</property>
<property name='responseStrId' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
</context>
<sequence xend='200' yend='800' >
<switch name='Condition' xpos='200' ypos='250' xend='200' yend='700' >
<case condition='request.Method="GET"' name='GET' >
<code name='Add Path/Query String' xpos='335' ypos='400' >
<![CDATA[ set context.pathStr=##class(production.utli.utli).AddPathString(request.id,"Practitioner")
 set context.queryStr=##class(production.utli.utli).AddQueryString(request.id,request.identifierSystemNIK,request.identifierValueNIK,request.name,request.gender,request.birthdate)]]]]><![CDATA[>
</code>
<call name='Call BO GET' target='ToSatusehat' async='0' xpos='335' ypos='500' >
<request type='HS.FHIRServer.Interop.Request' >
<assign property="callrequest.Request.RequestPath" value="context.pathStr" action="set" />
<assign property="callrequest.Request.QueryString" value="context.queryStr" action="set" />
<assign property="callrequest.Request.RequestMethod" value="&quot;GET&quot;" action="set" />
<assign property="callrequest.Request.RequestFormatCode" value="&quot;JSON&quot;" action="set" />
<assign property="callrequest.Request.ResponseFormatCode" value="&quot;JSON&quot;" action="set" />
</request>
<response type='HS.FHIRServer.Interop.Response' >
<assign property="context.fhirrespones" value="callresponse" action="set" />
<assign property="context.responseStrId" value="callresponse.QuickStreamId" action="set" />
</response>
</call>
<code name='write to db' xpos='335' ypos='600' >
<![CDATA[ s str=##class(production.utli.utli).WriteQuickStream(context.fhirrespones.QuickStreamId)
 s str1=##class(production.utli.utli).updateGetPractitionerResult(str)]]]]><![CDATA[>
</code>
</case>
<default/>
</switch>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="fhir.db.resource.Location">
<Super>%Persistent</Super>
<TimeChanged>66620,42006.9589353</TimeChanged>
<TimeCreated>66611,81361.9201536</TimeCreated>

<Property name="RId">
<Description>
Resource id</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="IdentifierSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="IdentifierValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Resource">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Method name="AddQueryString">
<ClassMethod>1</ClassMethod>
<FormalSpec>Rid:%String="",identifierSystem:%String="",identifierValue:%String="",name:%String="",organization:%String=""</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s returnStr=""
	if (Rid="")
	{
		if (name'="")
		{
			s returnStr="&name="_name
		}
		if (organization'="")
		{
			s returnStr=returnStr_"&organization="_$replace(organization,"Organization/","")
		}
		if (identifierValue'="")
		{
			if (identifierSystem'="") s returnStr="&identifier="_identifierSystem_"|"_identifierValue
		}
		s returnStr=$extract(returnStr,2,*)
	}
	return returnStr
]]></Implementation>
</Method>

<Method name="writeResource">
<ClassMethod>1</ClassMethod>
<FormalSpec>Rid="",strJSON="",identifierSystem:%String="",identifierValue:%String="",name:%String="",organization:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    s rowId=""
    &sql(select id into :rowId FROM fhir_db_resource.Location where RId=:Rid)
    if (rowId'="")
    {
	    s obj=##class(fhir.db.resource.Location).%OpenId(rowId)
	    s obj.RId=Rid
	    s obj.IdentifierSystem=identifierSystem
	    s obj.IdentifierValue=identifierValue
	    s obj.Name=name
	    s obj.Organization=$replace(organization,"Organization/","")
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
    }else
    {
	    s obj=##class(fhir.db.resource.Location).%New()
	    s obj.RId=Rid
	    s obj.IdentifierSystem=identifierSystem
	    s obj.IdentifierValue=identifierValue
	    s obj.Name=name
	    s obj.Organization=$replace(organization,"Organization/","")
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
	    s rowId=obj.%Id()
    }
    
    return rowId
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^fhir.db.resource.LocationD</DataLocation>
<DefaultData>LocationDefaultData</DefaultData>
<IdLocation>^fhir.db.resource.LocationD</IdLocation>
<IndexLocation>^fhir.db.resource.LocationI</IndexLocation>
<StreamLocation>^fhir.db.resource.LocationS</StreamLocation>
<Data name="LocationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>RId</Value>
</Value>
<Value name="3">
<Value>IdentifierSystem</Value>
</Value>
<Value name="4">
<Value>IdentifierValue</Value>
</Value>
<Value name="5">
<Value>Name</Value>
</Value>
<Value name="6">
<Value>Organization</Value>
</Value>
<Value name="7">
<Value>Resource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="fhir.db.resource.Organization">
<Super>%Persistent</Super>
<TimeChanged>66620,35870.0920286</TimeChanged>
<TimeCreated>66611,81361.9201536</TimeCreated>

<Property name="RId">
<Description>
Resource id</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="PartOf">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Resource">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Method name="AddQueryString">
<ClassMethod>1</ClassMethod>
<FormalSpec>Rid:%String="",name:%String="",partOf:%String=""</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s returnStr=""
	if (Rid="")
	{
		if (name'="")
		{
			s returnStr="&name="_name
		}
		if (partOf'="")
		{
			s returnStr=returnStr_"&partof="_partOf
		}
		s returnStr=$extract(returnStr,2,*)
	}
	return returnStr
]]></Implementation>
</Method>

<Method name="writeResource">
<ClassMethod>1</ClassMethod>
<FormalSpec>Rid="",strJSON="",name:%String="",partOf:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    s rowId=""
    &sql(select id into :rowId FROM fhir_db_resource.Organization where RId=:Rid)
    if (rowId'="")
    {
	    s obj=##class(fhir.db.resource.Organization).%OpenId(rowId)
	    s obj.RId=Rid
	    s obj.Name=name
	    s obj.PartOf=partOf
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
    }else
    {
	    s obj=##class(fhir.db.resource.Organization).%New()
	    s obj.RId=Rid
	    s obj.Name=name
	    s obj.PartOf=partOf
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
	    s rowId=obj.%Id()
    }
    
    return rowId
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^fhir.db.resource.OrganizationD</DataLocation>
<DefaultData>OrganizationDefaultData</DefaultData>
<IdLocation>^fhir.db.resource.OrganizationD</IdLocation>
<IndexLocation>^fhir.db.resource.OrganizationI</IndexLocation>
<StreamLocation>^fhir.db.resource.OrganizationS</StreamLocation>
<Data name="OrganizationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>RId</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>PartOf</Value>
</Value>
<Value name="5">
<Value>Resource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="fhir.db.resource.Patient">
<Super>%Persistent</Super>
<TimeChanged>66619,82203.2672635</TimeChanged>
<TimeCreated>66611,81361.9201536</TimeCreated>

<Property name="RId">
<Description>
Resource id</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Nik">
<Type>%String</Type>
</Property>

<Property name="MotherNik">
<Type>%String</Type>
</Property>

<Property name="Resource">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^fhir.db.resource.PatientD</DataLocation>
<DefaultData>PatientDefaultData</DefaultData>
<IdLocation>^fhir.db.resource.PatientD</IdLocation>
<IndexLocation>^fhir.db.resource.PatientI</IndexLocation>
<StreamLocation>^fhir.db.resource.PatientS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="PatientDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>RId</Value>
</Value>
<Value name="3">
<Value>Resource</Value>
</Value>
<Value name="4">
<Value>Nik</Value>
</Value>
<Value name="5">
<Value>MotherNik</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="MotherNik">
<Selectivity>10.0000%</Selectivity>
<OutlierSelectivity>.9:367400001111222</OutlierSelectivity>
<AverageFieldSize>15.5</AverageFieldSize>
</Property>
<Property name="Nik">
<Selectivity>10.0000%</Selectivity>
<OutlierSelectivity>.9:</OutlierSelectivity>
<AverageFieldSize>3.6</AverageFieldSize>
</Property>
<Property name="RId">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>14</AverageFieldSize>
</Property>
<Property name="Resource">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>

<Method name="writeResource">
<ClassMethod>1</ClassMethod>
<FormalSpec>Rid="",strJSON="",nik="",MotherNik=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    s rowId=""
    &sql(select id into :rowId FROM fhir_db_resource.Patient where RId=:Rid)
    if (rowId'="")
    {
	    s obj=##class(fhir.db.resource.Patient).%OpenId(rowId)
	    s obj.RId=Rid
	    if nik'="################" s obj.Nik=nik
	    if MotherNik'="################" s obj.MotherNik=MotherNik
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
    }else
    {
	    s obj=##class(fhir.db.resource.Patient).%New()
	    s obj.RId=Rid
	    if nik'="################" s obj.Nik=nik
	    if MotherNik'="################" s obj.MotherNik=MotherNik
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
	    s rowId=obj.%Id()
    }
    
    return rowId
]]></Implementation>
</Method>
</Class>


<Class name="fhir.db.resource.Practitioner">
<Super>%Persistent</Super>
<TimeChanged>66619,82116.878116</TimeChanged>
<TimeCreated>66611,81361.9201536</TimeCreated>

<Property name="RId">
<Description>
Resource id</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Nik">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Gender">
<Type>%String</Type>
</Property>

<Property name="Birthdate">
<Type>%String</Type>
</Property>

<Property name="Resource">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^fhir.db.resource.PractitionerD</DataLocation>
<DefaultData>PractitionerDefaultData</DefaultData>
<IdLocation>^fhir.db.resource.PractitionerD</IdLocation>
<IndexLocation>^fhir.db.resource.PractitionerI</IndexLocation>
<StreamLocation>^fhir.db.resource.PractitionerS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Data name="PractitionerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>RId</Value>
</Value>
<Value name="3">
<Value>Nik</Value>
</Value>
<Value name="4">
<Value>Name</Value>
</Value>
<Value name="5">
<Value>Gender</Value>
</Value>
<Value name="6">
<Value>Birthday</Value>
</Value>
<Value name="7">
<Value>Resource</Value>
</Value>
<Value name="8">
<Value>Birthdate</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="Birthdate">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>12</AverageFieldSize>
</Property>
<Property name="Gender">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>6</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
</Property>
<Property name="Nik">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>17</AverageFieldSize>
</Property>
<Property name="RId">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="Resource">
<Selectivity>50.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>

<Method name="writeResource">
<ClassMethod>1</ClassMethod>
<FormalSpec>Rid="",strJSON="",nik="",name:%String="",gender:%String="",birthdate:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    s rowId=""
    &sql(select id into :rowId FROM fhir_db_resource.Practitioner where RId=:Rid)
    if (rowId'="")
    {
	    s obj=##class(fhir.db.resource.Practitioner).%OpenId(rowId)
	    s obj.RId=Rid
	    s obj.Nik=nik
	    s obj.Name=name
	    s obj.Gender=gender
	    s obj.Birthdate=birthdate
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
    }else
    {
	    s obj=##class(fhir.db.resource.Practitioner).%New()
	    s obj.RId=Rid
	    s obj.Nik=nik
	    s obj.Name=name
	    s obj.Gender=gender
	    s obj.Birthdate=birthdate
	    s tsc=obj.Resource.Write(strJSON)
	    s status=obj.%Save()
	    s rowId=obj.%Id()
    }
    
    return rowId
]]></Implementation>
</Method>
</Class>


<Class name="fhir.dtl.OrganizationtoSDA">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66610,58667.9492895</TimeChanged>
<TimeCreated>66610,32010.9722985</TimeCreated>
<DependsOn>User.OrganizationRM.Record,HS.SDA3.Container</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='User.OrganizationRM.Record' targetClass='HS.SDA3.Container' create='new' language='objectscript' >
<assign value='source.active' property='target.Patient.Organizations.(1).Organization.IsActive' action='set' />
<group expanded='false' >
<annotation>identifier</annotation>
<assign value='source.identifierUse' property='target.Patient.Organizations.(1).Organization.Identifiers.(1).NumberType' action='set' />
<assign value='source.identifierSystem' property='target.Patient.Organizations.(1).Organization.Identifiers.(1).NumberTypeCodeSystem' action='set' />
<assign value='source.identifierValue' property='target.Patient.Organizations.(1).Organization.Identifiers.(1).Number' action='set' />
</group>
<group expanded='false' >
<annotation>type</annotation>
<assign value='source.typeCodingSystem' property='target.Patient.Organizations.(1).Organization.Type.SDACodingStandard' action='set' />
<assign value='source.typeCodingCode' property='target.Patient.Organizations.(1).Organization.Type.Code' action='set' />
<assign value='source.typeCodingDisplay' property='target.Patient.Organizations.(1).Organization.Type.Description' action='set' />
</group>
<assign value='source.name' property='target.Patient.Organizations.(1).CustomPairs.(1).Name' action='set' />
<group>
<annotation>telecom</annotation>
<assign value='source.telecomValue1' property='target.Patient.Organizations.(1).Organization.ContactInfo.WorkPhoneNumber' action='set' />
<assign value='source.telecomValue2' property='target.Patient.Organizations.(1).Organization.ContactInfo.EmailAddress' action='set' />
<assign value='source.telecomValue3' property='target.Patient.Organizations.(1).Organization.ContactInfo.Extension' action='set' />
</group>
<group>
<annotation>address</annotation>
<assign value='source.addressLine' property='target.Patient.Organizations.(1).Organization.Address.Street' action='set' />
<assign value='source.addressCountry' property='target.Patient.Organizations.(1).Organization.Address.Country.Code' action='set' />
<assign value='source.addressExtExtUrl1' property='target.Patient.Organizations.(1).Organization.Address.State.SDACodingStandard' action='set' />
<assign value='source.addressExtExtValueCode1' property='target.Patient.Organizations.(1).Organization.Address.State.Code' action='set' />
<assign value='source.addressExtExtUrl2' property='target.Patient.Organizations.(1).Organization.Address.City.SDACodingStandard' action='set' />
<assign value='source.addressExtExtvalueCode2' property='target.Patient.Organizations.(1).Organization.Address.City.Code' action='set' />
<assign value='source.addressExtExtUrl3' property='target.Patient.Organizations.(1).Organization.Address.County.SDACodingStandard' action='set' />
<assign value='source.addressExtExtvalueCode3' property='target.Patient.Organizations.(1).Organization.Address.County.Code' action='set' />
<assign value='source.addressExtExtvalueCode4' property='target.Patient.Organizations.(1).Extension' action='set' />
<assign value='source.addressCity' property='target.Patient.Organizations.(1).Organization.Address.City.Description' action='set' />
<assign value='source.addressPostalCode' property='target.Patient.Organizations.(1).Organization.Address.Zip.Code' action='set' />
</group>
<assign value='source.partOfReference' property='target.Patient.Organizations.(1).Organization.InternalReference' action='set' />
<assign value='source.addressExtExtUrl4' property='target.Patient.Organizations.(1).Organization.Address.Extension' action='set' key='village' disabled='1' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="fhir.dtl.csvToFhirR4Encounter">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66618,77655.1579115</TimeChanged>
<TimeCreated>66618,65787.5870074</TimeCreated>
<DependsOn>User.EncounterRM.Record,HS.FHIR.DTL.vR4.Model.Resource.Encounter</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='User.EncounterRM.Record' targetClass='HS.FHIR.DTL.vR4.Model.Resource.Encounter' create='new' language='objectscript' >
<assign value='source.id' property='target.id' action='set' />
<assign value='source.status' property='target.status' action='set' />
<group expanded='false' >
<annotation>class</annotation>
<assign value='source.classSystem' property='target.class.system' action='set' />
<assign value='source.classCode' property='target.class.code' action='set' />
<assign value='source.classDisplay' property='target.class.display' action='set' />
</group>
<group expanded='false' >
<annotation>subject</annotation>
<assign value='source.subjectReference' property='target.subject.reference' action='set' />
<assign value='source.subjectDisplay' property='target.subject.display' action='set' />
</group>
<group expanded='false' >
<annotation>participant
</annotation>
<assign value='source.participantTypeCodingSystem' property='target.participant.(1).type.(1).coding.(1).system' action='set' />
<assign value='source.participantTypeCodingCode' property='target.participant.(1).type.(1).coding.(1).code' action='set' />
<assign value='source.participantTypeCodingDisplay' property='target.participant.(1).type.(1).coding.(1).display' action='set' />
<assign value='source.participantIndividualReference' property='target.participant.(1).individual.reference' action='set' />
<assign value='source.participantIndividualDisplay' property='target.participant.(1).individual.display' action='set' />
</group>
<group expanded='false' >
<annotation>period</annotation>
<assign value='source.periodStart' property='target.period.start' action='set' />
<assign value='source.periodEnd' property='target.period.end' action='set' />
</group>
<group expanded='false' >
<annotation>loaction</annotation>
<assign value='source.locationLocationReference' property='target.location.(1).location.reference' action='set' />
<assign value='source.locationLocationDisplay' property='target.location.(1).location.display' action='set' />
</group>
<group expanded='false' >
<annotation>statusHistory</annotation>
<assign value='source.statusHistoryStatus' property='target.statusHistory.(1).status' action='set' />
<assign value='source.statusHistoryPeriodStart' property='target.statusHistory.(1).period.start' action='set' />
<assign value='source.statusHistoryPeriodEnd' property='target.statusHistory.(1).period.end' action='set' />
</group>
<group expanded='false' >
<annotation>identifier</annotation>
<assign value='source.identifierSystem' property='target.identifier.(1).system' action='set' />
<assign value='source.identifierValue' property='target.identifier.(1).value' action='set' />
</group>
</transform>
]]></Data>
</XData>
</Class>


<Class name="fhir.dtl.csvToFhirR4Location">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66616,62955.5179251</TimeChanged>
<TimeCreated>66616,60290.3224719</TimeCreated>
<DependsOn>User.LocationRM.Record,HS.FHIR.DTL.vR4.Model.Resource.Location</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='User.LocationRM.Record' targetClass='HS.FHIR.DTL.vR4.Model.Resource.Location' create='new' language='objectscript' >
<assign value='..Lookup("activeStatus",source.status)' property='target.status' action='set' />
<assign value='source.identifierUse' property='target.identifier.(1).use' action='set' />
<assign value='source.identifierSystem' property='target.identifier.(1).system' action='set' />
<assign value='source.identifierValue' property='target.identifier.(1).value' action='set' />
<assign value='source.name' property='target.name' action='set' />
<assign value='source.description' property='target.description' action='set' />
<assign value='source.mode' property='target.mode' action='set' />
<group expanded='false' >
<annotation>telecom1</annotation>
<assign value='source.telecomSystem1' property='target.telecom.(1).system' action='set' />
<assign value='source.telecomValue1' property='target.telecom.(1).value' action='set' />
<assign value='source.telecomUse1' property='target.telecom.(1).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom2</annotation>
<assign value='source.telecomSystem2' property='target.telecom.(2).system' action='set' />
<assign value='source.telecomValue2' property='target.telecom.(2).value' action='set' />
<assign value='source.telecomUse2' property='target.telecom.(2).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom3</annotation>
<assign value='source.telecomSystem3' property='target.telecom.(3).system' action='set' />
<assign value='source.telecomValue3' property='target.telecom.(3).value' action='set' />
<assign value='source.telecomUse3' property='target.telecom.(3).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom4</annotation>
<assign value='source.telecomSystem4' property='target.telecom.(4).system' action='set' />
<assign value='source.telecomValue4' property='target.telecom.(4).value' action='set' />
<assign value='source.telecomUse4' property='target.telecom.(4).use' action='set' />
</group>
<assign value='source.addressUse' property='target.address.use' action='set' />
<assign value='source.addressLine' property='target.address.line.(1)' action='set' />
<assign value='source.addressCity' property='target.address.city' action='set' />
<assign value='source.addressPostalCode' property='target.address.postalCode' action='set' />
<assign value='source.addressCountry' property='target.address.country' action='set' />
<assign value='source.addressExtensionUrl' property='target.address.extension.(1).url' action='set' />
<group>
<annotation>address extension extension 1</annotation>
<assign value='source.addressExtensionExtensionUrl1' property='target.address.extension.(1).extension.(1).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode1' property='target.address.extension.(1).extension.(1).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 2</annotation>
<assign value='source.addressExtensionExtensionUrl2' property='target.address.extension.(1).extension.(2).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode2' property='target.address.extension.(1).extension.(2).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 3</annotation>
<assign value='source.addressExtensionExtensionUrl3' property='target.address.extension.(1).extension.(3).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode3' property='target.address.extension.(1).extension.(3).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 4</annotation>
<assign value='source.addressExtensionExtensionUrl4' property='target.address.extension.(1).extension.(4).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode4' property='target.address.extension.(1).extension.(4).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 5</annotation>
<assign value='source.addressExtensionExtensionUrl5' property='target.address.extension.(1).extension.(5).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode5' property='target.address.extension.(1).extension.(5).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 6</annotation>
<assign value='source.addressExtensionExtensionUrl6' property='target.address.extension.(1).extension.(6).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode6' property='target.address.extension.(1).extension.(6).valueCode' action='set' />
</group>
<group>
<annotation>physical Type Coding</annotation>
<assign value='source.physicalTypeCodingSystem' property='target.physicalType.coding.(1).system' action='set' />
<assign value='source.physicalTypeCodingCode' property='target.physicalType.coding.(1).code' action='set' />
<assign value='source.physicalTypeCodingDisplay' property='target.physicalType.coding.(1).display' action='set' />
</group>
<group>
<annotation>position</annotation>
<assign value='source.positionLongitude' property='target.position.longitude' action='set' />
<assign value='source.positionLatitude' property='target.position.latitude' action='set' />
<assign value='source.positionAltitude' property='target.position.altitude' action='set' />
</group>
<assign value='source.managingOrganization' property='target.managingOrganization.reference' action='set' />
<assign value='source.id' property='target.id' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="fhir.dtl.csvToFhirR4Organization">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66611,75760.8578207</TimeChanged>
<TimeCreated>66611,27640.3461856</TimeCreated>
<DependsOn>User.OrganizationRM.Record,HS.FHIR.DTL.vR4.Model.Resource.Organization</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='User.OrganizationRM.Record' targetClass='HS.FHIR.DTL.vR4.Model.Resource.Organization' create='new' language='objectscript' >
<assign value='source.resourceType' property='target.resourceType' action='set' disabled='1' />
<assign value='source.active' property='target.active' action='set' />
<if condition='source.active="TRUE"' >
<true>
<assign value='1' property='target.active' action='set' />
</true>
<false>
<assign value='0' property='target.active' action='set' />
</false>
</if>
<assign value='source.identifierUse' property='target.identifier.(1).use' action='set' />
<assign value='source.identifierSystem' property='target.identifier.(1).system' action='set' />
<assign value='source.identifierValue' property='target.identifier.(1).value' action='set' />
<group expanded='false' >
<annotation>type</annotation>
<assign value='source.typeCodingSystem' property='target.type.(1).coding.(1).system' action='set' />
<assign value='source.typeCodingCode' property='target.type.(1).coding.(1).code' action='set' />
<assign value='source.typeCodingDisplay' property='target.type.(1).coding.(1).display' action='set' />
</group>
<assign value='source.name' property='target.name' action='set' />
<group expanded='false' >
<annotation>telecom1</annotation>
<assign value='source.telecomSystem1' property='target.telecom.(1).system' action='set' />
<assign value='source.telecomValue1' property='target.telecom.(1).value' action='set' />
<assign value='source.telecomUse1' property='target.telecom.(1).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom2</annotation>
<assign value='source.telecomSystem2' property='target.telecom.(2).system' action='set' />
<assign value='source.telecomValue2' property='target.telecom.(2).value' action='set' />
<assign value='source.telecomUse2' property='target.telecom.(2).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom3</annotation>
<assign value='source.telecomSystem3' property='target.telecom.(3).system' action='set' />
<assign value='source.telecomValue3' property='target.telecom.(3).value' action='set' />
<assign value='source.telecomUse3' property='target.telecom.(3).use' action='set' />
</group>
<assign value='source.partOfReference' property='target.partOf.reference' action='set' />
<assign value='source.addressUse' property='target.address.(1).use' action='set' />
<assign value='source.addressType' property='target.address.(1).type' action='set' />
<assign value='source.addressLine' property='target.address.(1).line.(1)' action='set' />
<assign value='source.addressCity' property='target.address.(1).city' action='set' />
<assign value='source.addressPostalCode' property='target.address.(1).postalCode' action='set' />
<assign value='source.addressCountry' property='target.address.(1).country' action='set' />
<assign value='source.addressExtUrl' property='target.address.(1).extension.(1).url' action='set' />
<group>
<annotation>address extension extension 1</annotation>
<assign value='source.addressExtExtUrl1' property='target.address.(1).extension.(1).extension.(1).url' action='set' />
<assign value='source.addressExtExtValueCode1' property='target.address.(1).extension.(1).extension.(1).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 2</annotation>
<assign value='source.addressExtExtUrl2' property='target.address.(1).extension.(1).extension.(2).url' action='set' />
<assign value='source.addressExtExtvalueCode2' property='target.address.(1).extension.(1).extension.(2).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 3</annotation>
<assign value='source.addressExtExtUrl3' property='target.address.(1).extension.(1).extension.(3).url' action='set' />
<assign value='source.addressExtExtvalueCode3' property='target.address.(1).extension.(1).extension.(3).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 4</annotation>
<assign value='source.addressExtExtUrl4' property='target.address.(1).extension.(1).extension.(4).url' action='set' />
<assign value='source.addressExtExtvalueCode4' property='target.address.(1).extension.(1).extension.(4).valueCode' action='set' />
</group>
<assign value='source.id' property='target.id' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="fhir.dtl.csvToFhirR4Patient">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66618,37836.0776305</TimeChanged>
<TimeCreated>66617,56201.1411629</TimeCreated>
<DependsOn>User.PatientRM.Record,HS.FHIR.DTL.vR4.Model.Resource.Patient</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='User.PatientRM.Record' targetClass='HS.FHIR.DTL.vR4.Model.Resource.Patient' create='new' language='objectscript' >
<assign value='source.id' property='target.id' action='set' />
<assign value='source.metaProfile' property='target.meta.profile.(1)' action='set' disabled='1' />
<group expanded='false' >
<annotation>identifier nik</annotation>
<assign value='source.identifierUseNik' property='target.identifier.(1).use' action='set' />
<assign value='source.identifierSystemNik' property='target.identifier.(1).system' action='set' />
<assign value='source.identifierValueNik' property='target.identifier.(1).value' action='set' />
</group>
<group expanded='false' >
<annotation>identifier passport</annotation>
<assign value='source.identifierUsePassport' property='target.identifier.(2).use' action='set' />
<assign value='source.identifierSystemPassport' property='target.identifier.(2).system' action='set' />
<assign value='source.identifierValuePassport' property='target.identifier.(2).value' action='set' />
</group>
<group expanded='false' >
<annotation>identifier Kk</annotation>
<assign value='source.identifierUseKk' property='target.identifier.(3).use' action='set' />
<assign value='source.identifierSystemKk' property='target.identifier.(3).system' action='set' />
<assign value='source.identifierValueKk' property='target.identifier.(3).value' action='set' />
</group>
<assign value='..Lookup("activeStatus",source.active)' property='target.active' action='set' />
<assign value='source.nameUse' property='target.name.(1).use' action='set' />
<assign value='source.nameText' property='target.name.(1).text' action='set' />
<assign value='source.gender' property='target.gender' action='set' />
<assign value='source.birthDate' property='target.birthDate' action='set' />
<assign value='..Lookup("activeStatus",source.deceasedBoolean)' property='target.deceasedBoolean' action='set' />
<group expanded='false' >
<annotation>telecom1</annotation>
<assign value='source.telecomSystem1' property='target.telecom.(1).system' action='set' />
<assign value='source.telecomValue1' property='target.telecom.(1).value' action='set' />
<assign value='source.telecomUse1' property='target.telecom.(1).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom2</annotation>
<assign value='source.telecomSystem2' property='target.telecom.(2).system' action='set' />
<assign value='source.telecomValue2' property='target.telecom.(2).value' action='set' />
<assign value='source.telecomUse2' property='target.telecom.(2).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom3</annotation>
<assign value='source.telecomSystem3' property='target.telecom.(3).system' action='set' />
<assign value='source.telecomValue3' property='target.telecom.(3).value' action='set' />
<assign value='source.telecomUse3' property='target.telecom.(3).use' action='set' />
</group>
<group expanded='false' >
<annotation>telecom4</annotation>
<assign value='source.telecomSystem4' property='target.telecom.(4).system' action='set' />
<assign value='source.telecomValue4' property='target.telecom.(4).value' action='set' />
<assign value='source.telecomUse4' property='target.telecom.(4).use' action='set' />
</group>
<assign value='source.addressUse' property='target.address.(1).use' action='set' />
<assign value='source.addressLine' property='target.address.(1).line.(1)' action='set' />
<assign value='source.addressCity' property='target.address.(1).city' action='set' />
<assign value='source.addressPostalCode' property='target.address.(1).postalCode' action='set' />
<assign value='source.addressCountry' property='target.address.(1).country' action='set' />
<assign value='source.addressExtensionUrl' property='target.address.(1).extension.(1).url' action='set' />
<group expanded='false' >
<annotation>address extension extension 1</annotation>
<assign value='source.addressExtensionExtensionUrl1' property='target.address.(1).extension.(1).extension.(1).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode1' property='target.address.(1).extension.(1).extension.(1).valueCode' action='set' />
</group>
<group expanded='false' >
<annotation>address extension extension 2</annotation>
<assign value='source.addressExtensionExtensionUrl2' property='target.address.(1).extension.(1).extension.(2).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode2' property='target.address.(1).extension.(1).extension.(2).valueCode' action='set' />
</group>
<group expanded='false' >
<annotation>address extension extension 3</annotation>
<assign value='source.addressExtensionExtensionUrl3' property='target.address.(1).extension.(1).extension.(3).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode3' property='target.address.(1).extension.(1).extension.(3).valueCode' action='set' />
</group>
<group expanded='false' >
<annotation>address extension extension 4</annotation>
<assign value='source.addressExtensionExtensionUrl4' property='target.address.(1).extension.(1).extension.(4).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode4' property='target.address.(1).extension.(1).extension.(4).valueCode' action='set' />
</group>
<group expanded='false' >
<annotation>address extension extension 5</annotation>
<assign value='source.addressExtensionExtensionUrl5' property='target.address.(1).extension.(1).extension.(5).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode5' property='target.address.(1).extension.(1).extension.(5).valueCode' action='set' />
</group>
<group>
<annotation>address extension extension 6</annotation>
<assign value='source.addressExtensionExtensionUrl6' property='target.address.(1).extension.(1).extension.(6).url' action='set' />
<assign value='source.addressExtensionExtensionvalueCode6' property='target.address.(1).extension.(1).extension.(6).valueCode' action='set' />
</group>
<assign value='source.maritalStatusCodingSystem' property='target.maritalStatus.coding.(1).system' action='set' />
<assign value='source.maritalStatusCodingCode' property='target.maritalStatus.coding.(1).code' action='set' />
<assign value='source.maritalStatusCodingDisplay' property='target.maritalStatus.coding.(1).display' action='set' />
<assign value='source.maritalStatusText' property='target.maritalStatus.text' action='set' />
<assign value='..Lookup("activeStatus",source.multipleBirthBoolean)' property='target.multipleBirthBoolean' action='set' />
<group expanded='false' >
<annotation>contact Relationship</annotation>
<assign value='source.contactRelationshipCodingSystem' property='target.contact.(1).relationship.(1).coding.(1).system' action='set' />
<assign value='source.contactRelationshipCodingCode' property='target.contact.(1).relationship.(1).coding.(1).code' action='set' />
<assign value='source.contactRelationshipNameUse' property='target.contact.(1).name.use' action='set' />
<assign value='source.contactRelationshipNameText' property='target.contact.(1).name.text' action='set' />
<assign value='source.contactRelationshipTelecomSystem' property='target.contact.(1).telecom.(1).system' action='set' />
<assign value='source.contactRelationshipTelecomValue' property='target.contact.(1).telecom.(1).value' action='set' />
<assign value='source.contactRelationshipTelecomUse' property='target.contact.(1).telecom.(1).use' action='set' />
</group>
<group expanded='false' >
<annotation>communication</annotation>
<assign value='source.communicationLanguageCodingSystem' property='target.communication.(1).language.coding.(1).system' action='set' />
<assign value='source.communicationLanguageCodingCode' property='target.communication.(1).language.coding.(1).code' action='set' />
<assign value='source.communicationLanguageCodingDisplay' property='target.communication.(1).language.coding.(1).display' action='set' />
<assign value='source.communicationLanguageText' property='target.communication.(1).language.text' action='set' />
<assign value='source.communicationPreferred' property='target.communication.(1).preferred' action='set' />
</group>
<group>
<annotation>extension 1 address</annotation>
<assign value='source.extension1Url' property='target.extension.(1).url' action='set' />
<assign value='source.extension1ValueAddressCity' property='target.extension.(1).valueAddress.city' action='set' />
<assign value='source.extension1ValueAddressCountry' property='target.extension.(1).valueAddress.country' action='set' />
</group>
<group>
<annotation>extension 2</annotation>
<assign value='source.extension2Url' property='target.extension.(2).url' action='set' />
<assign value='source.extension2ValueCode' property='target.extension.(2).valueCode' action='set' />
</group>
</transform>
]]></Data>
</XData>
</Class>


</Export>
